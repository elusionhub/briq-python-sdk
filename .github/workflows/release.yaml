name: Release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

env:
  PACKAGE_NAME: "elusion-briq-sdk"
  OWNER: "Elution Hub"

jobs:
  extract_details:
    name: Extract Release Details
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract tag and version details
        id: release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            # Remove 'v' prefix if present
            NEW_VERSION=$(echo $TAG_NAME | sed 's/^v//')
            SUFFIX=$(echo $NEW_VERSION | grep -oP '[a-z]+[0-9]+' || echo "")
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
            echo "‚úÖ Version: $NEW_VERSION"
            echo "‚úÖ Suffix: $SUFFIX"
            echo "‚úÖ Tag: $TAG_NAME"
          else
            echo "‚ùå No tag found"
            exit 1
          fi

  check_pypi_version:
    name: Check PyPI Version
    needs: extract_details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch latest version from PyPI
        run: |
          echo "üîç Checking PyPI for package: ${{ env.PACKAGE_NAME }}"
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")

          # Extract latest version more reliably
          latest_version=$(echo "$response" | python3 -c "
          import json, sys
          try:
              data = json.load(sys.stdin)
              versions = list(data.get('releases', {}).keys())
              if versions:
                  # Sort versions properly
                  from packaging import version
                  sorted_versions = sorted(versions, key=version.parse, reverse=True)
                  print(sorted_versions[0])
              else:
                  print('0.0.0')
          except:
              print('0.0.0')
          " 2>/dev/null || echo "0.0.0")

          echo "üì¶ Latest version on PyPI: $latest_version"
          echo "latest_version=$latest_version" >> $GITHUB_ENV

      - name: Compare versions
        run: |
          NEW_VERSION=${{ needs.extract_details.outputs.new_version }}
          LATEST_VERSION=$latest_version

          echo "üÜö Comparing versions:"
          echo "  New: $NEW_VERSION"
          echo "  Latest on PyPI: $LATEST_VERSION"

          # Use Python to compare versions properly
          python3 -c "
          from packaging import version
          import sys

          new_ver = version.parse('$NEW_VERSION')
          latest_ver = version.parse('$LATEST_VERSION')

          if new_ver > latest_ver:
              print('‚úÖ New version $NEW_VERSION is greater than PyPI version $LATEST_VERSION')
              sys.exit(0)
          else:
              print('‚ùå New version $NEW_VERSION is not greater than PyPI version $LATEST_VERSION')
              sys.exit(1)
          "

  run_tests:
    name: Run Tests
    needs: extract_details
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run linting
        run: python scripts/lint.py

      - name: Run tests
        run: python scripts/test.py --coverage --verbose

  build_package:
    name: Build Package
    needs: [extract_details, check_pypi_version, run_tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine packaging

      - name: Update version in source
        run: |
          NEW_VERSION=${{ needs.extract_details.outputs.new_version }}
          echo "üìù Updating version to $NEW_VERSION"

          # Update version in __init__.py
          sed -i "s/__version__ = ['\"].*['\"]/__version__ = \"$NEW_VERSION\"/" src/briq/__init__.py

          # Verify the change
          echo "‚úÖ Updated version:"
          grep "__version__" src/briq/__init__.py

      - name: Build package
        run: |
          echo "üî® Building package..."
          python scripts/build.py --clean

          echo "üì¶ Built files:"
          ls -la dist/

      - name: Verify package
        run: |
          echo "üîç Verifying package..."
          python -m twine check dist/*

          # Check that version matches
          BUILT_VERSION=$(python -c "
          import sys, os
          sys.path.insert(0, 'src')
          from briq import __version__
          print(__version__)
          ")

          EXPECTED_VERSION=${{ needs.extract_details.outputs.new_version }}

          if [ "$BUILT_VERSION" = "$EXPECTED_VERSION" ]; then
            echo "‚úÖ Version verification passed: $BUILT_VERSION"
          else
            echo "‚ùå Version mismatch: built=$BUILT_VERSION, expected=$EXPECTED_VERSION"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 7

  publish_pypi:
    name: Publish to PyPI
    needs: [extract_details, build_package]
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://pypi.org/project/${{ env.PACKAGE_NAME }}/
    permissions:
      id-token: write # For trusted publishing

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: List artifacts
        run: |
          echo "üì¶ Publishing artifacts:"
          ls -la dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          verbose: true

  create_github_release:
    name: Create GitHub Release
    needs: [extract_details, publish_pypi]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for changelog

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: Generate release notes
        id: release_notes
        run: |
          TAG_NAME=${{ needs.extract_details.outputs.tag_name }}
          NEW_VERSION=${{ needs.extract_details.outputs.new_version }}

          # Try to extract changelog entry
          if [ -f "CHANGELOG.md" ]; then
            echo "üìù Extracting release notes from CHANGELOG.md"
            
            # Extract changelog section for this version
            CHANGELOG_SECTION=$(awk "
            /^## \[$NEW_VERSION\]/ { flag=1; next }
            /^## \[/ && flag { exit }
            flag { print }
            " CHANGELOG.md | sed '/^$/d' | head -20)
            
            if [ -n "$CHANGELOG_SECTION" ]; then
              echo "release_notes<<EOF" >> $GITHUB_OUTPUT
              echo "## What's Changed" >> $GITHUB_OUTPUT
              echo "$CHANGELOG_SECTION" >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
              echo "## Installation" >> $GITHUB_OUTPUT
              echo "\`\`\`bash" >> $GITHUB_OUTPUT
              echo "pip install ${{ env.PACKAGE_NAME }}==$NEW_VERSION" >> $GITHUB_OUTPUT
              echo "\`\`\`" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "release_notes=## Release $NEW_VERSION" >> $GITHUB_OUTPUT
            fi
          else
            echo "release_notes=## Release $NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG_NAME=${{ needs.extract_details.outputs.tag_name }}
          NEW_VERSION=${{ needs.extract_details.outputs.new_version }}

          echo "üöÄ Creating GitHub release for $TAG_NAME"

          # Create release with artifacts
          gh release create "$TAG_NAME" \
            dist/* \
            --title "Release $NEW_VERSION" \
            --notes "${{ steps.release_notes.outputs.release_notes }}" \
            --latest

      - name: Update package status
        run: |
          echo "üéâ Release completed successfully!"
          echo "üì¶ Package: https://pypi.org/project/${{ env.PACKAGE_NAME }}/${{ needs.extract_details.outputs.new_version }}/"
          echo "üè∑Ô∏è Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.extract_details.outputs.tag_name }}"

  post_release:
    name: Post-Release Tasks
    needs: [extract_details, create_github_release]
    runs-on: ubuntu-latest
    if: always() && (needs.create_github_release.result == 'success')

    steps:
      - uses: actions/checkout@v4

      - name: Verify PyPI publication
        run: |
          NEW_VERSION=${{ needs.extract_details.outputs.new_version }}
          PACKAGE_NAME=${{ env.PACKAGE_NAME }}

          echo "üîç Verifying package is available on PyPI..."

          # Wait a bit for PyPI to update
          sleep 30

          # Check if package is available
          for i in {1..10}; do
            if pip index versions "$PACKAGE_NAME" | grep -q "$NEW_VERSION"; then
              echo "‚úÖ Package $PACKAGE_NAME $NEW_VERSION is available on PyPI"
              exit 0
            else
              echo "‚è≥ Waiting for PyPI to update... (attempt $i/10)"
              sleep 30
            fi
          done

          echo "‚ö†Ô∏è Package may not be immediately available on PyPI"

      - name: Create summary
        run: |
          echo "## üéâ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.extract_details.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ needs.extract_details.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** [${{ env.PACKAGE_NAME }}](https://pypi.org/project/${{ env.PACKAGE_NAME }}/${{ needs.extract_details.outputs.new_version }}/)" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.extract_details.outputs.tag_name }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "pip install ${{ env.PACKAGE_NAME }}==${{ needs.extract_details.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
